<?php
namespace Icecave\Manifold\Configuration\Caching;

use Icecave\Manifold\Configuration\ConfigurationInterface;
use Icecave\Manifold\Connection\ConnectionInterface;
use Icecave\Manifold\Connection\Container\ConnectionContainerInterface;
use Icecave\Manifold\Connection\Container\ConnectionContainerPairInterface;
use Icecave\Manifold\Connection\Container\ConnectionPoolInterface;
use Icecave\Manifold\Replication\ReplicationTreeInterface;

/**
 * Generates cacheable PHP code from pre-validated configuration.
 */
class ConfigurationCacheGenerator implements
    ConfigurationCacheGeneratorInterface
{
    /**
     * Generate PHP code to recreate the supplied configuration.
     *
     * The code generated by this method is intended to be stored in a file that
     * will be cached by the PHP opcode cache, effectively bypassing the need to
     * validate the configuration file each time.
     *
     * @param ConfigurationInterface $configuration The configuration to generate code for.
     *
     * @return string PHP source code that will replicate the supplied configuration.
     */
    public function generate(ConfigurationInterface $configuration)
    {
        return sprintf(
            "function (\n%s\n) {\n%s\n\n%s}",
            $this->indent(
                'Icecave\Manifold\Connection\ConnectionFactoryInterface ' .
                '$factory = null'
            ),
            $this->indent(
                sprintf(
                    "if (null === \$factory) {\n%s\n}",
                    $this->indent(
                        '$factory = new ' .
                        'Icecave\Manifold\Connection\ConnectionFactory;'
                    )
                )
            ),
            $this->indent($this->generateBody($configuration))
        );
    }

    /**
     * Generate the function body portion of the code.
     *
     * @param ConfigurationInterface $configuration The configuration to generate code for.
     *
     * @return string The closure source code.
     */
    protected function generateBody(ConfigurationInterface $configuration)
    {
        return sprintf(
            "%s\n%s\n%s\n%s\nreturn %s;\n",
            $this->generateConnections($configuration),
            $this->generatePools($configuration),
            $this->generateSelector($configuration),
            $this->generateReplicationTrees($configuration),
            $this->generateConfiguration($configuration)
        );
    }

    /**
     * Generate the connection creation portion of the code.
     *
     * @param ConfigurationInterface $configuration The configuration to generate code for.
     *
     * @return string The connection creation source code.
     */
    protected function generateConnections(
        ConfigurationInterface $configuration
    ) {
        $source = "\$connections = new Icecave\Collections\Map;\n";

        foreach ($configuration->connections() as $connection) {
            $nameString = var_export($connection->name(), true);

            $source .= sprintf(
                "\$connections->set(\n%s,\n%s\n);\n",
                $this->indent($nameString),
                $this->indent(
                    sprintf(
                        "\$factory->create(\n%s,\n%s\n)",
                        $this->indent($nameString),
                        $this->indent(var_export($connection->dsn(), true))
                    )
                )
            );
        }

        return $source;
    }

    /**
     * Generate the connection pool creation portion of the code.
     *
     * @param ConfigurationInterface $configuration The configuration to generate code for.
     *
     * @return string The connection pool creation source code.
     */
    protected function generatePools(
        ConfigurationInterface $configuration
    ) {
        $source = "\$connectionPools = new Icecave\Collections\Map;\n";

        foreach ($configuration->connectionPools() as $pool) {
            $nameString = var_export($pool->name(), true);

            $source .= "\$poolConnections = new Icecave\Collections\Vector;\n";

            foreach ($pool->connections() as $connection) {
                $source .= sprintf(
                    "\$poolConnections->pushBack(%s);\n",
                    $this->generateConnectionGet($connection)
                );
            }

            $source .= sprintf(
                "\$connectionPools->set(\n%s,\n%s\n);\n",
                $this->indent($nameString),
                $this->indent(
                    sprintf(
                        "new %s(\n%s,\n%s\n)",
                        'Icecave\Manifold\Connection\Container\ConnectionPool',
                        $this->indent($nameString),
                        $this->indent('$poolConnections')
                    )
                )
            );
        }

        return $source;
    }

    /**
     * Generate the connection selector creation portion of the code.
     *
     * @param ConfigurationInterface $configuration The configuration to generate code for.
     *
     * @return string The connection selector creation source code.
     */
    protected function generateSelector(
        ConfigurationInterface $configuration
    ) {
        $source = "\$databasePairs = new Icecave\Collections\Map;\n";

        foreach (
            $configuration->connectionContainerSelector()->databases() as
                $databaseName =>
                $databasePair
        ) {
            $source .= sprintf(
                "\$databasePairs->set(\n%s,\n%s\n);\n",
                $this->indent(var_export($databaseName, true)),
                $this->indent($this->generateContainerPair($databasePair))
            );
        }

        $source .= sprintf(
            "\$selector =\n%s\n",
            $this->indent(
                sprintf(
                    "new %s(\n%s,\n%s\n);",
                    'Icecave\Manifold\Connection\Container' .
                        '\ConnectionContainerSelector',
                    $this->indent(
                        $this->generateContainerPair(
                            $configuration->connectionContainerSelector()
                                ->defaults()
                        )
                    ),
                    $this->indent('$databasePairs')
                )
            )
        );

        return $source;
    }

    /**
     * Generate the replication tree creation portion of the code.
     *
     * @param ConfigurationInterface $configuration The configuration to generate code for.
     *
     * @return string The replication tree creation source code.
     */
    protected function generateReplicationTrees(
        ConfigurationInterface $configuration
    ) {
        $source = "\$replicationTrees = array();\n";

        foreach ($configuration->replicationTrees() as $replicationTree) {
            $source .= $this->generateReplicationTree($replicationTree);
        }

        return $source;
    }

    /**
     * Generate the creation code for an individual replication tree.
     *
     * @param ReplicationTreeInterface $replicationTree The replication tree to generate code for.
     *
     * @return string The replication tree creation source code.
     */
    protected function generateReplicationTree(
        ReplicationTreeInterface $replicationTree
    ) {
        $source = sprintf(
            "\$replicationTree = new %s(\n%s\n);\n",
            'Icecave\Manifold\Replication\ReplicationTree',
            $this->indent(
                $this->generateConnectionGet(
                    $replicationTree->replicationRoot()
                )
            )
        );

        $source .= $this->generateReplicationSlaves(
            $replicationTree,
            $replicationTree->replicationRoot()
        );

        $source .= "\$replicationTrees[] = \$replicationTree;\n";

        return $source;
    }

    /**
     * Generate the configuration creation portion of the code.
     *
     * @param ConfigurationInterface $configuration The configuration to generate code for.
     *
     * @return string The configuration creation source code.
     */
    protected function generateConfiguration(
        ConfigurationInterface $configuration
    ) {
        return <<< 'EOD'
new Icecave\Manifold\Configuration\Configuration(
    $connections,
    $connectionPools,
    $selector,
    $replicationTrees
)
EOD;
    }

    /**
     * Generate the code to add replication slaves for the supplied connection.
     *
     * @param ReplicationTreeInterface $replicationTree  The replication tree to query.
     * @param ConnectionInterface      $masterConnection The master connection to generate code for.
     *
     * @return string The replication slave addition source code.
     */
    protected function generateReplicationSlaves(
        ReplicationTreeInterface $replicationTree,
        ConnectionInterface $masterConnection
    ) {
        $source = '';

        foreach (
            $replicationTree->slavesOf($masterConnection) as $slaveConnection
        ) {
            $source .= sprintf(
                "\$replicationTree->addSlave(\n%s,\n%s\n);\n",
                $this->indent($this->generateConnectionGet($masterConnection)),
                $this->indent($this->generateConnectionGet($slaveConnection))
            );

            $source .= $this->generateReplicationSlaves(
                $replicationTree,
                $slaveConnection
            );
        }

        return $source;
    }

    /**
     * Generate the code to fetch the supplied connection from a pre-defined map
     * of connections.
     *
     * @param ConnectionInterface $connection The connection to generate code for.
     *
     * @return string The connection fetch source code.
     */
    protected function generateConnectionGet(ConnectionInterface $connection)
    {
        return sprintf(
            "\$connections->get(%s)",
            var_export($connection->name(), true)
        );
    }

    /**
     * Generate the code to fetch the supplied connection pool from a
     * pre-defined map of connections.
     *
     * @param ConnectionPoolInterface $connectionPool The connection pool to generate code for.
     *
     * @return string The connection pool fetch source code.
     */
    protected function generatePoolGet(ConnectionPoolInterface $connectionPool)
    {
        return sprintf(
            "\$connectionPools->get(%s)",
            var_export($connectionPool->name(), true)
        );
    }

    /**
     * Generate the creation code for a connection container pair.
     *
     * @param ConnectionContainerPairInterface $pair The pair to generate code for.
     *
     * @return string The connection container pair creation source code.
     */
    protected function generateContainerPair(
        ConnectionContainerPairInterface $pair
    ) {
        return sprintf(
            "new %s(\n%s,\n%s\n)",
            'Icecave\Manifold\Connection\Container\ConnectionContainerPair',
            $this->indent($this->generateContainerGet($pair->write())),
            $this->indent($this->generateContainerGet($pair->read()))
        );
    }

    /**
     * Generate the creation code for a connection container.
     *
     * @param ConnectionContainerInterface|null $container The container to generate code for.
     *
     * @return string The connection container creation source code.
     */
    protected function generateContainerGet(
        ConnectionContainerInterface $container = null
    ) {
        if (null === $container) {
            return 'null';
        }

        if ($container instanceof ConnectionInterface) {
            return $this->generateConnectionGet($container);
        }

        return $this->generatePoolGet($container);
    }

    /**
     * Indent the supplied source code.
     *
     * @param string       $source The source code to indent.
     * @param integer|null $levels The number of levels of indentation.
     *
     * @return string The indented source code.
     */
    protected function indent($source, $levels = null)
    {
        if (null === $levels) {
            $levels = 1;
        }

        $indent = str_repeat('    ', $levels);

        return implode(
            "\n",
            array_map(
                function ($line) use ($indent) {
                    if ('' === $line) {
                        return '';
                    }

                    return $indent . $line;
                },
                explode("\n", $source)
            )
        );
    }
}
